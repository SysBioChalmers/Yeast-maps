# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
library(installr)
require(installr)
test = 3
test + 1
test = 3
test2 = 2*test
test = 3
test2 = 2*test
test = 1
namn = 'Filip'
?paste
namn = 'Filip'
efternamn = 'Leidewall'
paste(namn,efternamn,sep = "_")
paste(namn,efternamn,sep = "44444")
library(datasets)
?datasets
library(help = "datasets")
data("HairEyeColor")
HairEye_data = data("HairEyeColor")
head(HairEye_data)
data = data(HairEyeColor)
library(datasets)
Hairdata = data(HairEyeColor)
Hairdata
library(datasets)
data(HairEyeColor)
data(HairEyeColor)
View(HairEyeColor)
data("iris")
iris = data("iris")
data("iris")
library(datasets)
iris
iris_data = iris
View(iris_data)
head(iris_data)
summary(iris_data)
iris_data$Sepal.Length
boxplot(iris_data$Sepal.Length)
View(iris_data)
?boxplot
boxplot(iris_data$Sepal.Length)
boxplot(iris_data$Sepal.Length,horizontal = TRUE)
boxplot(iris_data$Sepal.Length,horizontal = FALSE,names = "Sepal Length")
boxplot(iris_data$Sepal.Length,horizontal = FALSE,names = "Sepal.Length")
boxplot(iris_data$Sepal.Length,horizontal = FALSE,col = "blue")
data = data.frame(cond1 = c(2,4.14,3.06,2.75,3.35,3.3,5.8,2.8,7.1,4.2),
cond2 = c(4.15,4.9,4.82,3.4,3.6,5.9,8.4,5.5,8.2,6.5))
head(data)
cond1.mean <- mean(data$cond1)
cond2.mean <- mean(data$cond2)
?sd
cond1.sd <- sd(data$cond1)
cond2.sd <- sd(data$cond2)
boxplot(data)
library(Cairo)
CairoWin()
boxplot(data)
?boxplot
boxplot(data)
boxplot(data, names = c("Condition 1","Condition 2"))
boxplot(data, names = c("Condition 1","Condition 2"), col = c("red","blue"))
boxplot(data, names = c("Condition 1","Condition 2"),ylab = "Time (sec)")
CairoWin()
boxplot(data, names = c("Condition 1","Condition 2"),ylab = "Time (sec)")
?wilcox.test
library(Cairo)
my.data = data.frame(cond1 = c(2,4.14,3.06,2.75,3.35,3.3,5.8,2.8,7.1,4.2),
cond2 = c(4.15,4.9,4.82,3.4,3.6,5.9,8.4,5.5,8.2,6.5))
cond1.mean <- mean(my.data$cond1)
cond2.mean <- mean(my.data$cond2)
cond1.sd <- sd(my.data$cond1)
cond2.sd <- sd(my.data$cond2)
wilcox.test(my.data$cond1, my.data$cond2, paired = TRUE, alternative = "less")
wilcox.test(my.data$cond1, my.data$cond2, paired = TRUE, alternative = "greater")
wilcox.test(my.data$cond1, my.data$cond2, paired = TRUE, alternative = "less")
temp <- wilcox.test(my.data$cond1, my.data$cond2, paired = TRUE, alternative = "less")
temp <- wilcox.test(my.data$cond1, my.data$cond2, paired = TRUE, alternative = "less")$pvalue
temp <- wilcox.test(my.data$cond1, my.data$cond2, paired = TRUE, alternative = "less")
temp <- wilcox.test(my.data$cond1, my.data$cond2, paired = TRUE, alternative = "less")$p.value
fc.percent <- ((cond2.mean/cond1.mean)-1)*100
cond1.mean <- mean(my.data$cond1)
cond2.mean <- mean(my.data$cond2)
cond1.median <- median(my.data$cond1)
cond2.median <- median(my.data$cond2)
5.5/3.84
fc <- (cond2.mean/cond1.mean)
#== LOAD DATA ==
# Load datasets library
library(datasets)
# Fetch Iris data set
iris = iris
#== EXPLORE DATA SET ==
# View top of the Iris data set
head(iris)
# The data set consists of 4 features (Sepal.length, Sepal.Width, Petal.Length and Petal.Width) for each species
# View range and distribution of each feature
summary(iris)
# Remove Species column, for plotting purposes
iris_feat = iris[,-5]
# Plot boxplots for each feature
x11()
boxplot(iris_feat)
# Boxplots indicate that the Sepals are larger than the petals in general.
#== PCA ==
# Scale the Iris data set to ensure that each feature has the same standard deviation.
iris_feat_scaled = scale(iris_feat)
# Plot boxplots of the scaled data
x11() # Opens new graphics device in new window
boxplot(iris_feat_scaled)
# Run PCA on scaled iris data
pca1 = prcomp(iris_feat_scaled)
# Plot biplot of pca
x11()
biplot(pca1)
library(ggplot2)
# Plot data
p1 <- ggplot(as.data.frame(pca1$x), aes(PC1, PC2), environment = environment()) +
geom_point(size = 1, aes(color = iris$Species)) +
stat_ellipse(aes(PC1,PC2,color=iris$Species, group=iris$Species))
x11()
p1
#, aes(color = pca.color)
#,color=pca.color, group=pca.color
#boxplot(iris_data$Sepal.Length)
#boxplot(iris_data$Sepal.Length,horizontal = FALSE,col = "red")
View(iris)
sample(1:nrow(iris), size = 75)
# I decided to split the full iris data set into two equal parts, one half for training the random forest classifier,
# and one half for validating the model.
# We have 150 data points, so 75 will be used for training/testing. These will be randomly picked.
set.seed(8)
?set.seed
set.seed(Sys.time())
sample(1:nrow(iris), size = 75)
sample(1:nrow(iris), size = 75)
sample(1:nrow(iris), size = 75)
sample(1:nrow(iris), size = 75)
# I decided to split the full iris data set into two equal parts, one half for training the random forest classifier,
# and one half for validating the model.
# We have 150 data points, so 75 will be used for training/testing. These will be randomly picked.
set.seed(8)
sample(1:nrow(iris), size = 75)
sample(1:nrow(iris), size = 75)
# I decided to split the full iris data set into two equal parts, one half for training the random forest classifier,
# and one half for validating the model.
# We have 150 data points, so 75 will be used for training/testing. These will be randomly picked.
set.seed(8)
sample(1:nrow(iris), size = 75)
iris[sample(1:nrow(iris), size = 75),]
# Retrive 75 random indexes
random.indexes <- sample(1:nrow(iris), size = 75)
random.indexes
# Sets seed for random number generation. This is to able to reproduce results
set.seed(8)
# Retrive 75 random indexes
random.indexes <- sample(1:nrow(iris), size = 75)
# Extract 75 random flowers from the iris data set
iris.train <- iris[random.indexes,]
iris.test <- iris[-random.indexes,]
install.packages("Randomforest")
install.packages("randomForest")
require(randomForest)
?randomForest
head(iris.train)
iris.train[,-5]
iris.train[,5]
is.factor(iris.train[,5])
rf.iris <- randomForest(x=iris.train[,-5],y=iris.train[,5], ntree = 500 ,importance = TRUE)
rf.iris$confusion
iris.test
iris.test <- iris[-random.indexes,]
iris.test
iris.train
dim(iris.train)
dim(iris.test)
iris.test
View(iris.test)
dim(iris.test)
# Sets seed for random number generation. This is to able to reproduce results
set.seed(8)
# Retrive 75 random indexes
random.indexes <- sample(1:nrow(iris), size = 75)
# Extract 75 random flowers from the iris data set
iris.train <- iris[random.indexes,]
iris.test <- iris[-random.indexes,]
require(randomForest)
rf.iris <- randomForest(x=iris.train[,-5],y=iris.train[,5], ntree = 500 ,importance = TRUE)
dim(iris.test)
dim(iris.train)
iris.test
-random.indexes
is.vector(random.indexes)
iris[-random.indexes,]
# Extract 75 random flowers from the iris data set
iris.train <- iris[random.indexes,]
iris.train
iris.val <- iris[-random.indexes,]
iris.val
# Sets seed for random number generation. This is to able to reproduce results
set.seed(8)
# Retrive 75 random indexes
random.indexes <- sample(1:nrow(iris), size = 75)
# Extract 75 random flowers from the iris data set
iris.train <- iris[random.indexes,]
iris.test <- iris[-random.indexes,]
dim(iris.train)
dim(iris.test)
iris.test
rownames(iris.test)
rownames(iris)
rownames(iris) <- c()
iris
rownames(iris)
rownames(iris) <- ""
rownames(iris) <- NULL
iris
rownames(iris)
# Extract 75 random flowers from the iris data set
iris.train <- iris[random.indexes,]
iris.test <- iris[-random.indexes,]
iris.train
rownames(iris.test)
rownames(iris.test) <- NULL
iris.test
# Retrive 75 random indexes
random.indexes <- sample(1:nrow(iris), size = 75)
# Extract 75 random flowers from the iris data set
iris.train <- iris[random.indexes,]
iris.test <- iris[-random.indexes,]
iris.test
iris[-1,]
is.vector(random.indexes)
random.indexes
rownames(iris) <- NULL
iris
rownames(iris)
iris.train
rownames(iris.train) <- NULL
iris.train
iris[-random.indexes,]
iris[-c(1,2),]
-random.indexes
as.vector(-random.indexes)
iris[-random.indexes,]
head(iris.train)
head(iris.test)
dim(iris.test)
nrow(iris.test)
View(iris.test)
2+2
iris.test
iris.train
rownames(iris) <- NULL
# Sets seed for random number generation. This is to able to reproduce results
set.seed(8)
# Retrive 75 random indexes
random.indexes <- sample(1:nrow(iris), size = 75)
# Extract 75 random flowers from the iris data set
iris.train <- iris[random.indexes,]
iris.train
iris.train <- iris[random.indexes,]
rownames(iris.train) <- NULL
iris.test <- iris[-random.indexes,]
rownames(iris.test) <- NULL
iris.test
# Sets seed for random number generation. This is to able to reproduce results
set.seed(8)
# Retrive 75 random indexes
random.indexes <- sample(1:nrow(iris), size = 75)
# Extract 75 random flowers from the iris data set
iris.train <- iris[random.indexes,]
iris.test <- iris[-random.indexes,]
iris.train
iris.test
# Sets seed for random number generation. This is to able to reproduce results
set.seed(8)
# Retrive 75 random indexes
random.indexes <- sample(1:nrow(iris), size = 75)
# Extract 75 random flowers from the iris data set
iris.train <- iris[random.indexes,]
rownames(iris.train) <- NULL
iris.test <- iris[-random.indexes,]
rownames(iris.test) <- NULL
require(randomForest)
rf.iris <- randomForest(x=iris.train[,-5],y=iris.train[,5], ntree = 500 ,importance = TRUE)
rf.iris$confusion
[,5]
# Extract true flower type in testing data
Y.true <- iris.test[,5]
# Predict flower type in the testing data,
Y.pred <- predict(rf.iris,iris.test[,-5])
table(Y.true,Y.pred)
# View confusion matrix
rf.iris$confusion
library(devtools)
install_github("velocyto-team/velocyto.R")
library(devtools)
install_github("velocyto-team/velocyto.R")
library(velocyto)
install_github("velocyto-team/velocyto.R")
library(velocyto)
install_github("velocyto-team/velocyto.R")
install.packages("pcaMethods")
BiocManager::install(pcaMethods)
install.packages("BiocManager")
BiocManager::install("pcaMethods")
install_github("velocyto-team/velocyto.R")
library(velocyto)
install_github("velocyto-team/velocyto.R")
install_github("velocyto-team/velocyto.R")
library(velocyto)
install.packages("Rcpp")
install.packages("Rcpp")
install_github("velocyto-team/velocyto.R")
library(devtools)
install_github("velocyto-team/velocyto.R")
install.packages("digest")
library(devtools)
install.packages("processx")
library(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
install.packages("rlang")
library(devtools)
install_github("velocyto-team/velocyto.R")
install_github("velocyto-team/velocyto.R")
#install.packages("xml2")
require(xml2)
# Load subsystem maps in SBML format
PATH = "C:/Users/angel/Desktop/PhD/Yeast-maps/"
subsystem = "pyruvate metabolism"
PATH_xml = paste(PATH,"SBMLfiles/",subsystem,".xml",sep = "")
subsystem_xml = read_xml(PATH_xml)
subsystem_list = as_list(subsystem_xml)
# Load example .NET file
# This is the correct formatting for omix compatibility
PATH_csv = paste(PATH,"CSVfiles/golgi_example.net",sep = "")
example_csv = as.data.frame(read_delim("C:/Users/angel/Desktop/PhD/Yeast-maps/CSVfiles/golgi_example.net",
"\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE))
colnames(example_csv)
# Construct pathway data frame
pathway_df = data.frame("P", subsystem, subsystem, -100, -1, -1)
colnames(pathway_df) = colnames(example_csv)
# Construct reaction data frame
nrxn = length(subsystem_list$sbml$model$listOfReactions) # Retrieve amount of metabolites
rxn_df = data.frame(matrix(NA, nrow = nrxn, ncol = 6)) # Create empty data frame
rxn_df[,1] = rep("R",nrxn)
require(readr)
example_csv = as.data.frame(read_delim("C:/Users/angel/Desktop/PhD/Yeast-maps/CSVfiles/golgi_example.net",
"\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE))
colnames(example_csv)
# Construct pathway data frame
pathway_df = data.frame("P", subsystem, subsystem, -100, -1, -1)
colnames(pathway_df) = colnames(example_csv)
# Construct reaction data frame
nrxn = length(subsystem_list$sbml$model$listOfReactions) # Retrieve amount of metabolites
rxn_df = data.frame(matrix(NA, nrow = nrxn, ncol = 6)) # Create empty data frame
rxn_df[,1] = rep("R",nrxn)
# Extract x coordinates:
xtemp = attributes(subsystem_xml$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias$bounds)$x
attributes(subsystem_xml$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias$bounds)
attributes(subsystem_list$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias$bounds)
xtemp = attributes(subsystem_list$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias$bounds)$x
View(subsystem_list)
View(example_csv)
attributes(subsystem_list$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias$bounds)
#Add 100 to enzyme positions (x coord)
attributes(subsystem_list$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias$info)
attributes(subsystem_list$sbml$model$listOfSpecies$species)
attributes(subsystem_list$sbml$model$listOfSpecies$species)$metaid
attributes(subsystem_list$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias$bounds)
attributes(subsystem_list$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias)
attributes(subsystem_list$sbml$model$listOfSpecies$species)$id
attributes(subsystem_list$sbml$model$listOfSpecies$species)
attributes(subsystem_list$sbml$model$listOfSpecies)
attributes(subsystem_list$sbml$model$listOfSpecies$species$annotation)
attributes(subsystem_list$sbml$model$listOfSpecies[1])
attributes(subsystem_list$sbml$model$listOfSpecies[1])
View(subsystem_list)
# Extract x coordinates:
xtemp = attributes(subsystem_list$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias$bounds)$x
xtemp
attributes(subsystem_list$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias$info)
attributes(subsystem_list$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias)
colnames(example_csv)
subsystem_list$sbml$model$listOfReactions
subsystem_list$sbml$model$listOfReactions[1]
subsystem_list$sbml$model$listOfReactions$reaction
length(subsystem_list$sbml$model$listOfReactions)
rxn_df = data.frame(matrix(NA, nrow = nrxn, ncol = 6)) # Create empty data frame
rxn_df[,1] = rep("R",nrxn)
head(rxn_df)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation)
attributes(subsystem_list$sbml$model$listOfReactions$reaction)
attributes(subsystem_list$sbml$model$listOfReactions[1])
attributes(subsystem_list$sbml$model$listOfReactions[[1]])
attributes(subsystem_list$sbml$model$listOfReactions[[2]])
attributes(subsystem_list$sbml$model$listOfReactions[[29]])
attributes(subsystem_list$sbml$model$listOfReactions[[22]])
for (i in 1:nrxn) {
rxn_df[i,2] = attributes(subsystem_list$sbml$model$listOfReactions[[i]])
}
for (i in 1:nrxn) {
rxn_df[i,2] = attributes(subsystem_list$sbml$model$listOfReactions[[i]])$id
}
head(rxn_df)
setwd(PATH)
# Store Pathway ID
rxn_df[,3] = rep[subsystem,nrxn]
subsystem
head(rxn_df)
rep[subsystem,nrxn]
rep["YO",nrxn]
length(subsystem_list$sbml$model$listOfReactions)
# Setup empty matrix for storing data
nrxn = length(subsystem_list$sbml$model$listOfReactions) # Retrieve amount of metabolites
# Setup empty matrix for storing data
nrxn = as.integer(length(subsystem_list$sbml$model$listOfReactions)) # Retrieve amount of metabolites
rep("R",nrxn)
# Store Pathway ID
rxn_df[,3] = rep(subsystem,nrxn)
attributes(subsystem_list$sbml$model$listOfReactions[[i]])
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation)
attributes(subsystem_list$sbml$model$listOfReactions$reaction)
subsystem_list$sbml$model$listOfReactions$reaction$listOfModifiers
subsystem_list$sbml$model$listOfReactions$reaction
attributes(subsystem_list$sbml$model$annotation$extension$listOfProteins)
attributes(subsystem_list$sbml$model$annotation$extension$listOfProteins$protein)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$listOfReactants$speciesReference$annotation$extension)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$listOfReactants$speciesReference$annotation$extension$alias)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$connectScheme$listOfLineDirection$lineDirection)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$connectScheme)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$line)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$line$)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$reactionType)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$listOfReactantLinks)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$listOfReactantLinks$reactantLink)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$connectScheme)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$connectScheme$listOfLineDirection)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$connectScheme$listOfLineDirection$lineDirection)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$connectScheme)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$line)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$line)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$connectScheme)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$listOfReactantLinks$reactantLink$editPoints)
subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$listOfReactantLinks$reactantLink$editPoints
subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]]
subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]][1]
subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]][2]
strsplit(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]],",")
strsplit(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]],",")[1]
strsplit(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]],",")[[1]]
strsplit(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]],",")[[1]][1]
strsplit(subsystem_list$sbml$model$listOfReactions[[1]]$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]],",")
strsplit(subsystem_list$sbml$model$listOfReactions[[2]]$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]],",")
strsplit(subsystem_list$sbml$model$listOfReactions[[4]]$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]],",")
strsplit(subsystem_list$sbml$model$listOfReactions[[3]]$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]],",")
subsystem_list$sbml$model$listOfReactions[[3]]$annotation$extension$listOfReactantLinks$reactantLink$editPoints[[1]]
subsystem_list$sbml$model$listOfReactions[[3]]$annotation$extension$listOfReactantLinks$reactantLink$editPoints
subsystem_list$sbml$model$listOfReactions[[3]]$annotation$extension$listOfReactantLinks$reactantLink
attributes(subsystem_list$sbml$model$listOfReactions[[3]]$annotation$extension$listOfReactantLinks$reactantLink)
subsystem_list$sbml$model$listOfReactions$[[3]]$
subsystem_list$sbml$model$listOfReactions$[[3]]
subsystem_list$sbml$model$listOfReactions[[3]]$annotation$extension$listOfProductLinks$productLink$editPoints
subsystem_list$sbml$model$listOfReactions$reaction$listOfReactants$speciesReference$annotation$extension$alias$
4
subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$baseReactants$baseReactant
subsystem_list$sbml$model$annotation$extension$listOfSpeciesAliases$speciesAlias$activity
subsystem_list$sbml$model$listOfReactions$reaction$listOfReactants$speciesReference$annotation$extension$alias
subsystem_list$sbml$model$listOfReactions$reaction$listOfReactants
subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$baseReactants
subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$baseReactants$baseReactant
attr(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$baseReactants$baseReactant)
attribute(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$baseReactants$baseReactant)
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$baseReactants$baseReactant)
2+2
attributes(subsystem_list$sbml$model$listOfReactions$reaction$annotation$extension$baseReactants$baseReactant)
attributes(subsystem_list$sbml$model$listOfReactions[[1]]$annotation$extension$baseReactants$baseReactant)
for (i in 1:nrxn) {
attributes(subsystem_list$sbml$model$listOfReactions[[i]]$annotation$extension$baseReactants$baseReactant)
}
for (i in 1:nrxn) {
print(attributes(subsystem_list$sbml$model$listOfReactions[[i]]$annotation$extension$baseReactants$baseReactant))
}
for (i in 1:nrxn) {
print(i)
print(attributes(subsystem_list$sbml$model$listOfReactions[[i]]$annotation$extension$baseReactants$baseReactant))
}
